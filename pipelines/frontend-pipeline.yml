# azure-pipelines-frontend.yml
trigger:
  branches:
    include:
      - main

stages:
  - stage: Build
    jobs:
      - job: BuildFrontend
        displayName: "Build Frontend"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'

          - script: |
              npm install
              npm run build
            displayName: 'Build React Application'

          - task: Docker@2
            inputs:
              command: 'buildAndPush'
              repository: '$(containerRegistry)/frontend-app'
              Dockerfile: '**/Dockerfile'
              tags: '$(Build.BuildId)'
              containerRegistry: '$(containerRegistryServiceConnection)'

  - stage: Deploy
    dependsOn: Build
    jobs:
      - deployment: DeployToDev
        displayName: "Deploy Frontend to Dev"
        environment: 'dev'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Kubernetes@1
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: '$(azureSubscription)'
                    azureResourceGroup: '$(aksResourceGroup)'
                    kubernetesCluster: '$(aksClusterNameDev)'
                    namespace: 'dev'
                    command: 'apply'
                    useConfigurationFile: true
                    configurationFile: 'k8s/frontend-deployment.yaml'
        variables:
          - name: containerRegistry
            value: 'youracrname.azurecr.io'  # Dev ACR
          - name: aksClusterNameDev
            value: 'aks-cluster-dev'

      - deployment: DeployToStaging
        displayName: "Deploy Frontend to Staging"
        environment: 'staging'
        dependsOn: DeployToDev
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Kubernetes@1
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: '$(azureSubscription)'
                    azureResourceGroup: '$(aksResourceGroup)'
                    kubernetesCluster: '$(aksClusterNameStaging)'
                    namespace: 'staging'
                    command: 'apply'
                    useConfigurationFile: true
                    configurationFile: 'k8s/frontend-deployment.yaml'
        variables:
          - name: containerRegistry
            value: 'youracrname.azurecr.io'  # Staging ACR
          - name: aksClusterNameStaging
            value: 'aks-cluster-staging'

      - deployment: DeployToProd
        displayName: "Deploy Frontend to Production"
        environment: 'prod'
        dependsOn: DeployToStaging
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            preDeploy:
              - task: ManualValidation@0
                inputs:
                  instructions: 'Approve to proceed with Production deployment.'
                  onTimeout: 'reject'  # Rejects if not approved within the timeout
                  timeout: '30'        # 30 minutes for approval
            deploy:
              steps:
                - task: Kubernetes@1
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: '$(azureSubscription)'
                    azureResourceGroup: '$(aksResourceGroup)'
                    kubernetesCluster: '$(aksClusterNameProd)'
                    namespace: 'prod'
                    command: 'apply'
                    useConfigurationFile: true
                    configurationFile: 'k8s/frontend-deployment.yaml'
        variables:
          - name: containerRegistry
            value: 'youracrname.azurecr.io'  # Prod ACR
          - name: aksClusterNameProd
            value: 'aks-cluster-prod'
